<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-tw">
    <title>調和的靈感 Matt - 部落格</title>
    <subtitle>紀錄我的思考，讀書筆記，還有程式設計</subtitle>
    <link rel="self" type="application/atom+xml" href="https://chchwy.github.io/tags/bu-luo-ge/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://chchwy.github.io"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2020-09-01T00:00:00+00:00</updated>
    <id>https://chchwy.github.io/tags/bu-luo-ge/atom.xml</id>
    <entry xml:lang="zh-tw">
        <title>用 Github Actions 更新部落格</title>
        <published>2020-09-01T00:00:00+00:00</published>
        <updated>2020-09-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://chchwy.github.io/posts/github-actions-hugo-blog/"/>
        <id>https://chchwy.github.io/posts/github-actions-hugo-blog/</id>
        
        <content type="html" xml:base="https://chchwy.github.io/posts/github-actions-hugo-blog/">&lt;p&gt;現在我的部落格是 Hugo + Github Pages 的組合。&lt;&#x2F;p&gt;
&lt;p&gt;跟一般的部落格平台不一樣，用 Hugo 這類靜態網站產生器，內容更新了需要全站重新編譯。所以更新部落格就變得稍微有點麻煩。&lt;&#x2F;p&gt;
&lt;p&gt;我怎麼處理部落格更新，總分成三個時期：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;自己手動編譯。每次小修改都要打指令，麻煩，讓我變得不太愛寫部落格。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.travis-ci.com&#x2F;user&#x2F;deployment&#x2F;pages&#x2F;&quot;&gt;Travis-CI 自動編譯&lt;&#x2F;a&gt;。只要 Git Repo 推送就會自動重新編譯，節省我很多力氣。缺點是需要兩個 Git Repo，這個 chchwy.github.io 只保存編譯後的結果，需要另一個 Git 倉庫保存原始 markdown 檔案。&lt;&#x2F;li&gt;
&lt;li&gt;現在。採用 Github Actions 部署。直接在 Github 上一站搞定所有的事情。
&lt;ul&gt;
&lt;li&gt;只有一個 Git Repo，用 branch 區隔原檔和編譯結果。原檔放 &lt;code&gt;blog&lt;&#x2F;code&gt;，編譯結果放 &lt;code&gt;master&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;任何 git push 都會觸發 Github Actions 自動全站編譯。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;she-ding-github-action&quot;&gt;設定 Github Action&lt;&#x2F;h2&gt;
&lt;p&gt;設定步驟如下：&lt;&#x2F;p&gt;
&lt;p&gt;一、先到你的 Git Repo 點選 Action 分頁，然後點 &lt;code&gt;New workflow&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;github-action-01.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;二、接著點選 &lt;code&gt;set up a workflow yourself&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;三、Github 會導引你創建一個 Workflow 設定檔，位於 &lt;code&gt;.github&#x2F;workflows&#x2F;main.xml&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;在文字框填入以下設定 (依個人情況修改適合自己的設定)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yml&quot; style=&quot;background-color:#393939;color:#dedede;&quot; class=&quot;language-yml &quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#fed6af;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d6d6d680;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d68686;&quot;&gt;Deploy my blog&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d6d6d680;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0cfa1;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#87ae86;&quot;&gt; 自己取一個喜歡的名字
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#d6d6ae;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#fed6af;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#fed6af;&quot;&gt;branches&lt;&#x2F;span&gt;&lt;span&gt;: [ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d68686;&quot;&gt;blog &lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0cfa1;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#87ae86;&quot;&gt; 設定哪些 branch 會觸發 Action
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#fed6af;&quot;&gt;jobs&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#fed6af;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#fed6af;&quot;&gt;runs-on&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d68686;&quot;&gt;ubuntu-latest &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0cfa1;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#87ae86;&quot;&gt; 執行環境
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#fed6af;&quot;&gt;steps&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#fed6af;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d68686;&quot;&gt;Checkout Repo
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#fed6af;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d68686;&quot;&gt;actions&#x2F;checkout@v2
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0cfa1;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#87ae86;&quot;&gt; 直接引用其他人寫好的 Hugo to Github Pages Action
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#fed6af;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d6d6d680;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d68686;&quot;&gt;Publish Hugo Site&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d6d6d680;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#fed6af;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d68686;&quot;&gt;chabad360&#x2F;hugo-gh-pages@master 
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#fed6af;&quot;&gt;with&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#fed6af;&quot;&gt;branch&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d6d6d680;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d68686;&quot;&gt;master&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d6d6d680;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#fed6af;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d68686;&quot;&gt;--gc --minify --cleanDestinationDir
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#fed6af;&quot;&gt;githubToken&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d68686;&quot;&gt;${{ secrets.PERSONAL_TOKEN }}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;四、Github Action 需要 Access Token，它才可以讀寫你的 Git 倉庫。&lt;&#x2F;p&gt;
&lt;p&gt;照著官方文件的指示 &lt;a href=&quot;https:&#x2F;&#x2F;docs.github.com&#x2F;en&#x2F;github&#x2F;authenticating-to-github&#x2F;creating-a-personal-access-token&quot;&gt;Creating a Personal Access Token&lt;&#x2F;a&gt; 建立 Access Token，記得要給予適當的讀寫權限。&lt;&#x2F;p&gt;
&lt;p&gt;接著到 Github 倉庫的 Setting 分頁，選 Secrets -&amp;gt; New Secrets。給這個 Secret 取名叫做 PERSONAL_TOKEN (基本上就是 workflow 設定檔的最後一行那個變數名)，貼上剛剛建立的 Access Token 字串。&lt;&#x2F;p&gt;
&lt;p&gt;五、測試 Github Action&lt;&#x2F;p&gt;
&lt;p&gt;推送修改到你的 Git 倉庫，到 Actions 分頁看看有沒有觸發 Workflow&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;github-action-03.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;看見 workflow 開始執行就表示大功告成，Github Action 設定完畢，可以射後不理盡情寫部落格了。&lt;&#x2F;p&gt;
&lt;p&gt;參考連結: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;chabad360&#x2F;hugo-gh-pages&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;chabad360&#x2F;hugo-gh-pages&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="zh-tw">
        <title>博客當如駭客 - Github Pages &amp; Jekyll</title>
        <published>2012-12-16T00:00:00+00:00</published>
        <updated>2012-12-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://chchwy.github.io/posts/blogging-like-a-hacker-github-pages/"/>
        <id>https://chchwy.github.io/posts/blogging-like-a-hacker-github-pages/</id>
        
        <content type="html" xml:base="https://chchwy.github.io/posts/blogging-like-a-hacker-github-pages/">&lt;h2 id=&quot;wei-shen-mo-yong-github-pages&quot;&gt;為什麼用 Github Pages?&lt;&#x2F;h2&gt;
&lt;p&gt;遇見 Github Page 之前我定居在 &lt;a href=&quot;http:&#x2F;&#x2F;chchwy.blogspot.tw&#x2F;&quot; title=&quot;Blogger 調和的靈感&quot;&gt;Blogger&lt;&#x2F;a&gt; ，斷斷續續不是很認真的寫了四年左右的博客，除了一些小缺點，像貼程式碼時老是跟我抱怨&lt;code&gt;&amp;lt;iostream&amp;gt;&lt;&#x2F;code&gt;不是合法的 HTML 標籤外，還算滿意 Blogger 的服務。畢竟要找到比 Blogger 更好的平台也不容易。&lt;&#x2F;p&gt;
&lt;p&gt;但是身為一個程式設計師，總想要對自己的 Blog 有更多、更多的控制權。我曾經試著自己架設伺服器，不過養機器實在太過麻煩，離開學校之後博客該何去何從也沒個底，就不了了之。&lt;&#x2F;p&gt;
&lt;p&gt;所以當我看見 &lt;a href=&quot;http:&#x2F;&#x2F;pages.github.com&#x2F;&quot; title=&quot;Github Pages&quot;&gt;Github Pages&lt;&#x2F;a&gt; 時眼睛一亮，馬上就發覺這就是我想要的博客系統:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;kumamoto-542410_1280.jpg&quot; alt=&quot;Dawn&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;首先，Github Pages 給予我完全控制頁面的權力，省卻了管理主機的麻煩。
Github本身作為全球性的代碼託管服務商，不需要擔心服務品質。&lt;&#x2F;p&gt;
&lt;p&gt;不同於其他的博客系統，後端總要有一套 PHP+MySQL 之類的運行環境即時運算頁面，
Github Pages 後端採用了一個叫作 &lt;a href=&quot;http:&#x2F;&#x2F;jekyllrb.com&#x2F;&quot; title=&quot;Jekyll&quot;&gt;Jekyll&lt;&#x2F;a&gt; 的靜態網站產生器。
Jekyll 一開始就將整個網站編譯成靜態HTML頁面，所以不用資料庫，也不用後端語言，對於網路空間的要求極低。博客這類好幾天才會更新一篇的網站，靜態編譯再適合不過了。&lt;&#x2F;p&gt;
&lt;p&gt;但是靜態網站的缺點就是訪客沒辦法回應文章，必須倚賴第三方服務，好在&lt;a href=&quot;http:&#x2F;&#x2F;disqus.com&quot; title=&quot;Disqus&quot;&gt;Disqus&lt;&#x2F;a&gt; 和 &lt;a href=&quot;http:&#x2F;&#x2F;developers.facebook.com&#x2F;docs&#x2F;reference&#x2F;plugins&#x2F;comments&#x2F;&quot; title=&quot;Facebook comments&quot;&gt;Facebook&lt;&#x2F;a&gt; 都提供這類網站評論的服務，申請一個很容易，我現在就是用Disqus。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;markdown&quot;&gt;Markdown&lt;&#x2F;h2&gt;
&lt;p&gt;另一個我喜歡的特性就是可以用 Markdown 語法寫文章，不知道什麼是 Markdown 的朋友可以&lt;a href=&quot;http:&#x2F;&#x2F;markdown.tw&quot; title=&quot;Markdown Syntax&quot;&gt;看看語法說明&lt;&#x2F;a&gt; 。用 Markdown 來寫文章太省力了，可讀性也很好，我不再需要為了文章的樣式跟 HTML 標籤瞎攪和，回歸單純寫作的樂趣，而且可以用我最鍾愛的文字編輯器 &lt;a href=&quot;http:&#x2F;&#x2F;www.sublimetext.com&#x2F;&quot; title=&quot;Sublime Text&quot;&gt;Sublime Text 2&lt;&#x2F;a&gt; 。&lt;&#x2F;p&gt;
&lt;p&gt;想當然爾，Github Pages 一定是用 git 版本控制系統來管理博客，整個博客就是一個版本庫，因此我不用上網，可以先在本地端寫文章，寫好再推送上 Github 就好了。用了 git ，基本上不必擔心內容遺失，文章都有完整的歷史紀錄，多台電腦同步也很方便。&lt;&#x2F;p&gt;
&lt;p&gt;還有一點，Jekyll 的標語是 Blogging Like a Hacker，聽起來很帥。XD&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ru-he-kai-shi&quot;&gt;如何開始&lt;&#x2F;h2&gt;
&lt;p&gt;我在網路上搜尋了很多Jekyll&#x2F;Github Pages教學，大部分不是寫的雜亂無章，就是有所缺漏， 最後總算找到一篇條理清晰的教學
「&lt;a href=&quot;http:&#x2F;&#x2F;www.ruanyifeng.com&#x2F;blog&#x2F;2012&#x2F;08&#x2F;blogging_with_jekyll.html&quot;&gt;搭建一个免费的，无限流量的Blog----github Pages和Jekyll入门&lt;&#x2F;a&gt;」，只能說阮一峰，不意外。
裡面有個小錯誤需要更正，就是單純的個人博客不需要特別建立 gh-pages 分支， 直接放在主分支 master裡就可以了。&lt;&#x2F;p&gt;
&lt;p&gt;只要有基本的 HTML&#x2F;CSS 知識，和折騰的精神，可以來試試看Jekyll :D&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
